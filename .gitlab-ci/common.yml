.test_template:
  stage: test
  tags:
    - dev
  image: python:3.13-alpine
  environment:
    name: test
  services:
    - name: postgres:17.4-alpine3.20
      alias: postgres
    - name: rabbitmq:3-management-alpine
      alias: rabbitmq
  variables:
    DB_HOST: postgres
    DB_PORT: 5233
    DB_NAME: test_db
    DB_USER: test_user
    DB_PASS: test_password
    POSTGRES_DB: test_db
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_password
    RABBITMQ_HOST: rabbitmq
    RABBITMQ_PORT: 5672
    RABBITMQ_VHOST: /
    RABBITMQ_USER: user
    RABBITMQ_PASS: user_pw
    RABBITMQ_DEFAULT_USER: user
    RABBITMQ_DEFAULT_PASS: user_pw
    POETRY_VIRTUALENVS_IN_PROJECT: 'true'
  needs:
    - job: prepare_dependencies
      artifacts: true
  cache:
    key:
      files:
        - poetry.lock
      prefix: poetry-${CI_PROJECT_ID}
    paths:
      - .venv
    policy: pull
  before_script:
    - echo "Using .venv from artifacts"
  allow_failure: true
  rules:
    - if: >-
        $CI_PIPELINE_SOURCE == "merge_request_event" &&
        $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"
      when: always
    - when: never

.deploy_template:
  image: docker:latest
  tags:
    - dev
  variables:
    GIT_STRATEGY: clone
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H "$SWARM_MANAGER_IP" >> ~/.ssh/known_hosts
